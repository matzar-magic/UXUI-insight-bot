# bot/scheduler.py - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import asyncio
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.db.database import (
    get_user_stats, get_questions_by_topic, get_question,
    get_questions_count_by_topic, get_all_users,
    reset_daily_progress_if_needed, get_user_answered_questions_count,
    get_next_topic, update_user_topic_progress, mark_topic_completed
)
from bot.config import load_config
import os
from aiogram.types import FSInputFile
from pytz import timezone
import time

config = load_config()

# –ö—ç—à –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
subscription_cache = {}
user_topic_cache = {}
CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

# –§–ª–∞–≥ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
is_sending_daily_questions = False
is_sending_admin_notification = False
sending_lock = asyncio.Lock()


def cleanup_old_cache():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–∞—Ö"""
    current_time = time.time()

    # –û—á–∏—â–∞–µ–º subscription_cache
    for user_id in list(subscription_cache.keys()):
        if current_time - subscription_cache[user_id]['timestamp'] > CACHE_TTL:
            del subscription_cache[user_id]

    # –û—á–∏—â–∞–µ–º user_topic_cache
    for user_id in list(user_topic_cache.keys()):
        if current_time - user_topic_cache[user_id]['timestamp'] > CACHE_TTL:
            del user_topic_cache[user_id]


async def check_subscription(user_id, bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if user_id in subscription_cache:
        if current_time - subscription_cache[user_id]['timestamp'] < CACHE_TTL:
            return subscription_cache[user_id]['subscribed']

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        is_subscribed = member.status in ['member', 'administrator', 'creator']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        subscription_cache[user_id] = {
            'subscribed': is_subscribed,
            'timestamp': current_time
        }

        return is_subscribed
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


async def send_question_to_user(bot, user_id, question_data, caption):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID"""
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 12 –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–æ 11
    (question_id, category, question_block, image_path,
     option_a, option_b, option_c, option_d,
     buttons_count, correct_option, explanation, created_at) = question_data

    keyboard_buttons = []
    letters = ['a', 'b', 'c', 'd']

    for i in range(buttons_count):
        if i < len(letters):
            keyboard_buttons.append(
                InlineKeyboardButton(text=letters[i], callback_data=f"answer_{question_id}_{letters[i]}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    keyboard.inline_keyboard.append(keyboard_buttons)

    full_question_text = f"{caption}\n\n{question_block}"

    try:
        if image_path and os.path.exists(image_path):
            photo = FSInputFile(image_path)
            await bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=full_question_text,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(chat_id=user_id, text=full_question_text, reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            await bot.send_message(chat_id=user_id, text=full_question_text, reply_markup=keyboard)
        except Exception as e2:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e2}")


async def send_admin_notification(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    global is_sending_admin_notification

    async with sending_lock:
        if is_sending_admin_notification:
            print("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return

        is_sending_admin_notification = True

    try:
        await bot.send_message(chat_id=config.ADMIN_ID, text="–í—Å—ë –≥—É–¥! ‚úÖ")
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {config.ADMIN_ID}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
    finally:
        async with sending_lock:
            is_sending_admin_notification = False


async def process_user_questions(bot, user_id, current_topic):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞
    total_questions = get_questions_count_by_topic(current_topic)
    answered_questions = get_user_answered_questions_count(user_id, current_topic)

    if answered_questions >= total_questions:
        # –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
        next_topic = get_next_topic(current_topic)
        if next_topic:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_topic_progress(user_id, next_topic, 0)
            current_topic = next_topic
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(user_id, f"üéâ –¢–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ: {next_topic}")
            except:
                pass
        else:
            # –í—Å–µ —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            try:
                await bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã!")
            except:
                pass
            return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–º–µ
    topic_questions_count = get_questions_count_by_topic(current_topic)
    if topic_questions_count == 0:
        print(f"–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ {current_topic} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return current_topic

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π
    question_ids_result = get_questions_by_topic(user_id, current_topic, 1)
    question_ids = [row[0] for row in question_ids_result] if question_ids_result else []

    if not question_ids:
        # –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        next_topic = get_next_topic(current_topic)
        if next_topic:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
            update_user_topic_progress(user_id, next_topic, 0)
            current_topic = next_topic

            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
            question_ids_result = get_questions_by_topic(user_id, current_topic, 1)
            question_ids = [row[0] for row in question_ids_result] if question_ids_result else []

            if not question_ids:
                print(f"–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–º–µ {current_topic} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return current_topic
        else:
            print(f"–í—Å–µ —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return current_topic

    question_data = get_question(question_ids[0])
    if question_data:
        caption = f"// {current_topic.capitalize()}"
        try:
            await send_question_to_user(bot, user_id, question_data, caption)
            print(f"–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    return current_topic


async def send_daily_question(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    global is_sending_daily_questions

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    async with sending_lock:
        if is_sending_daily_questions:
            print("‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return

        is_sending_daily_questions = True

    try:
        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        subscription_cache.clear()
        user_topic_cache.clear()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        reset_daily_progress_if_needed()

        users = get_all_users()

        if not users:
            print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–µ–º–∞–º –¥–ª—è batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
        users_by_topic = {}
        for user_id in users:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è —Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            current_time = time.time()
            if user_id in user_topic_cache:
                if current_time - user_topic_cache[user_id]['timestamp'] < CACHE_TTL:
                    current_topic = user_topic_cache[user_id]['topic']
                else:
                    stats = get_user_stats(user_id)
                    current_topic = stats[1] if stats else 'typography'
                    user_topic_cache[user_id] = {
                        'topic': current_topic,
                        'timestamp': current_time
                    }
            else:
                stats = get_user_stats(user_id)
                current_topic = stats[1] if stats else 'typography'
                user_topic_cache[user_id] = {
                    'topic': current_topic,
                    'timestamp': current_time
                }

            if current_topic not in users_by_topic:
                users_by_topic[current_topic] = []
            users_by_topic[current_topic].append(user_id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ —Ç–µ–º–∞–º
        processed_users = 0
        skipped_users = 0

        for topic, topic_users in users_by_topic.items():
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–º—ã –æ–¥–∏–Ω —Ä–∞–∑
            question_ids = get_questions_by_topic(None, topic, len(topic_users) * 2)

            for user_id in topic_users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    is_subscribed = await check_subscription(user_id, bot)
                    if not is_subscribed:
                        skipped_users += 1
                        continue

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    new_topic = await process_user_questions(bot, user_id, topic)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à, –µ—Å–ª–∏ —Ç–µ–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                    if new_topic != topic:
                        user_topic_cache[user_id] = {
                            'topic': new_topic,
                            'timestamp': time.time()
                        }

                    processed_users += 1

                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                    if processed_users % 10 == 0:
                        await asyncio.sleep(0.1)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    continue

        # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        subscription_cache.clear()
        user_topic_cache.clear()

        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_users}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_users}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()

    finally:
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        async with sending_lock:
            is_sending_daily_questions = False


def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    scheduler = AsyncIOScheduler()

    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = timezone('Europe/Moscow')

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ 14:00 –ø–æ –û–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–∏–ª–∏ –∂–µ –≤ 11:00 –ø–æ –ú–°–ö)
    scheduler.add_job(
        send_daily_question,
        trigger=CronTrigger(hour=11, minute=0, timezone=moscow_tz),
        args=[bot],
        id='daily_question',
        misfire_grace_time=300  # –†–∞–∑—Ä–µ—à–∞–µ–º –æ–ø–æ–∑–¥–∞–Ω–∏–µ –¥–æ 5 –º–∏–Ω—É—Ç
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ 13:00 –ø–æ –û–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–∏–ª–∏ –∂–µ –≤ 10:00 –ø–æ –ú–°–ö)
    scheduler.add_job(
        send_admin_notification,
        trigger=CronTrigger(hour=10, minute=0, timezone=moscow_tz),
        args=[bot],
        id='admin_notification',
        misfire_grace_time=300
    )

    # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00 –ø–æ –û–º—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–∏–ª–∏ –∂–µ –≤ 00:00 –ø–æ –ú–°–ö)
    scheduler.add_job(
        reset_daily_progress_if_needed,
        trigger=CronTrigger(hour=0, minute=0, timezone=moscow_tz),
        id='reset_progress',
        misfire_grace_time=300
    )

    # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(
        cleanup_old_cache,
        trigger=CronTrigger(hour='*', minute=0, timezone=moscow_tz),
        id='cache_cleanup'
    )

    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω —Å –∑–∞–¥–∞—á–∞–º–∏:")
    for job in scheduler.get_jobs():
        print(f"   - {job.id}: {job.trigger}")

    return scheduler


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def shutdown_scheduler(scheduler):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    if scheduler:
        scheduler.shutdown()
        print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
