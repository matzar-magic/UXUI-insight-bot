import asyncio
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.db.database import get_user_stats, get_questions_by_topic, get_question, get_questions_count_by_topic, \
    get_all_users, reset_daily_progress_if_needed, get_user_answered_questions_count, get_next_topic, \
    update_user_topic_progress, mark_topic_completed
from bot.config import load_config
import os
from aiogram.types import FSInputFile
from pytz import timezone

config = load_config()


async def check_subscription(user_id, bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


async def send_admin_notification(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    try:
        await bot.send_message(chat_id=config.ADMIN_ID, text="–í—Å—ë –≥—É–¥! ‚úÖ")
        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {config.ADMIN_ID}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def send_question_to_user(bot, user_id, question_data, caption):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID"""
    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 12 –ø–æ–ª–µ–π –≤–º–µ—Å—Ç–æ 11
    (question_id, category, question_block, image_path,
     option_a, option_b, option_c, option_d,
     buttons_count, correct_option, explanation, created_at) = question_data  # –î–æ–±–∞–≤–ª–µ–Ω–æ created_at

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    keyboard_buttons = []
    letters = ['a', 'b', 'c', 'd']

    for i in range(buttons_count):
        if i < len(letters):
            keyboard_buttons.append(
                InlineKeyboardButton(text=letters[i], callback_data=f"answer_{question_id}_{letters[i]}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    keyboard.inline_keyboard.append(keyboard_buttons)

    full_question_text = f"{caption}\n\n{question_block}"

    try:
        if image_path and os.path.exists(image_path):
            photo = FSInputFile(image_path)
            await bot.send_photo(
                chat_id=user_id,
                photo=photo,
                caption=full_question_text,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(chat_id=user_id, text=full_question_text, reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await bot.send_message(chat_id=user_id, text=full_question_text, reply_markup=keyboard)


async def send_daily_question(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
    reset_daily_progress_if_needed()

    users = get_all_users()

    if not users:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        return

    for user_id in users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_subscribed = await check_subscription(user_id, bot)
        if not is_subscribed:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue

        stats = get_user_stats(user_id)

        if not stats:
            continue

        total_correct, current_topic, progress, completed_topics, user_role = stats  # –î–æ–±–∞–≤–ª—è–µ–º user_role

        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞
        total_questions = get_questions_count_by_topic(current_topic)
        answered_questions = get_user_answered_questions_count(user_id, current_topic)

        if answered_questions >= total_questions:
            # –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
            next_topic = get_next_topic(current_topic)
            if next_topic:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_user_topic_progress(user_id, next_topic, 0)
                current_topic = next_topic
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await bot.send_message(user_id, f"üéâ –¢–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ: {next_topic}")
                except:
                    pass
            else:
                # –í—Å–µ —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                try:
                    await bot.send_message(user_id, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã!")
                except:
                    pass
                continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–º–µ
        topic_questions_count = get_questions_count_by_topic(current_topic)
        if topic_questions_count == 0:
            print(f"–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ {current_topic} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            continue

        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏)
        question_ids = get_questions_by_topic(user_id, current_topic, 1)

        if not question_ids:
            # –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
            next_topic = get_next_topic(current_topic)
            if next_topic:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
                update_user_topic_progress(user_id, next_topic, 0)
                current_topic = next_topic

                # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
                question_ids = get_questions_by_topic(user_id, current_topic, 1)

                if not question_ids:
                    print(f"–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–º–µ {current_topic} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    continue
            else:
                print(f"–í—Å–µ —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                continue

        question_data = get_question(question_ids[0])
        if question_data:
            caption = f"// {current_topic.capitalize()}"
            try:
                await send_question_to_user(bot, user_id, question_data, caption)
                print(f"–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")


def setup_scheduler(bot: Bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    scheduler = AsyncIOScheduler()

    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = timezone('Europe/Moscow')

    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ 14:00
    scheduler.add_job(
        send_daily_question,
        trigger=CronTrigger(hour=11, minute=00, timezone=moscow_tz),
        args=[bot],
        id='daily_question'
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ 13:00
    scheduler.add_job(
        send_admin_notification,
        trigger=CronTrigger(hour=10, minute=00, timezone=moscow_tz),
        args=[bot],
        id='admin_notification'
    )

    scheduler.start()
    return scheduler
