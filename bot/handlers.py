# bot/handlers.py - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot.db.database import (
    add_user, get_user_stats, update_user_stats,
    get_questions_by_topic, get_question,
    update_user_topic_progress, mark_topic_completed,
    get_questions_count_by_topic,
    get_user_daily_progress, update_user_daily_progress,
    reset_daily_progress_if_needed,
    get_user_answered_questions_count,
    add_answered_question, get_next_topic,
    get_all_users, reset_user_progress,
    execute_query
)
from bot.config import load_config
import os
import asyncio
from aiogram.types import FSInputFile
from datetime import datetime
import time

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∏ TTL
user_next_questions = {}
user_active_sessions = {}
admin_broadcast_state = {}
user_reset_states = {}
message_delete_tasks = {}
subscription_cache = {}

# –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–µ–π
MAX_CACHE_SIZE = 1000
CACHE_TTL = 300  # 5 –º–∏–Ω—É—Ç

config = load_config()


def cleanup_old_cache():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–∞—Ö"""
    current_time = time.time()

    # –û—á–∏—â–∞–µ–º –∫—ç—à–∏
    for cache_dict in [user_next_questions, user_active_sessions,
                       admin_broadcast_state, user_reset_states, subscription_cache]:
        keys_to_remove = []
        for key, value in cache_dict.items():
            if isinstance(value, dict) and 'timestamp' in value:
                if current_time - value['timestamp'] > CACHE_TTL:
                    keys_to_remove.append(key)
            elif current_time - getattr(value, 'timestamp', current_time) > CACHE_TTL:
                keys_to_remove.append(key)

        for key in keys_to_remove:
            del cache_dict[key]

    # –û—á–∏—â–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∫—ç—à–∏
    for cache_dict in [user_next_questions, user_active_sessions]:
        if len(cache_dict) > MAX_CACHE_SIZE:
            keys_to_remove = list(cache_dict.keys())[:len(cache_dict) - MAX_CACHE_SIZE]
            for key in keys_to_remove:
                del cache_dict[key]


async def delete_message_after(message: types.Message, delay: int):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –æ—Ç–º–µ–Ω–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞—á"""
    user_id = message.chat.id
    message_id = message.message_id

    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    task_key = f"{user_id}_{message_id}"
    if task_key in message_delete_tasks:
        message_delete_tasks[task_key].cancel()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    async def delete_task():
        await asyncio.sleep(delay)
        try:
            await message.delete()
        except:
            pass
        finally:
            if task_key in message_delete_tasks:
                del message_delete_tasks[task_key]

    message_delete_tasks[task_key] = asyncio.create_task(delete_task())


async def check_subscription(user_id, bot, force_check=False):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    current_time = time.time()

    # –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫—ç—à
    if not force_check:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if user_id in subscription_cache:
            if current_time - subscription_cache[user_id]['timestamp'] < CACHE_TTL:
                return subscription_cache[user_id]['subscribed']

    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        is_subscribed = member.status in ['member', 'administrator', 'creator']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        subscription_cache[user_id] = {
            'subscribed': is_subscribed,
            'timestamp': current_time
        }

        return is_subscribed
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def ask_for_subscription(message: types.Message):
    """–ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/matzar_studio")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ])

    await message.answer(
        "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @matzar_studio.\n\n"
        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )


async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    add_user(user_id, username)
    reset_daily_progress_if_needed()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = str(user_id) == config.ADMIN_ID

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    user_first_name = message.from_user.first_name or "–¥—Ä—É–≥"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    is_subscribed = await check_subscription(user_id, message.bot)

    welcome_text = (
        f"üé® –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤—ã –¥–∏–∑–∞–π–Ω–∞ —á–µ—Ä–µ–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.\n\n"
    )

    if not is_subscribed:
        welcome_text += (
            "‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @matzar_studio.\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' –Ω–∏–∂–µ."
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url="https://t.me/matzar_studio")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ])

        await message.answer(welcome_text, reply_markup=keyboard)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_text += (
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 14:00 –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Ç–µ–º:\n"
        "‚Ä¢ –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞\n"
        "‚Ä¢ –ö–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ UX-–ø—Ä–∏–Ω—Ü–∏–ø—ã\n"
        "‚Ä¢ UI-–ø–∞—Ç—Ç–µ—Ä–Ω—ã\n"
        "‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/today - –ø–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/reset_progress - —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin:
        welcome_text += (
            "\nüëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
            "/letter - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            "/out - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
        )

    welcome_text += "\nüí° –ù–µ —É–¥–∞–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ - –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏!"

    await message.answer(welcome_text)


async def stats_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    is_subscribed = await check_subscription(message.from_user.id, message.bot)
    if not is_subscribed:
        await ask_for_subscription(message)
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /stats
    try:
        await message.delete()
    except:
        pass

    user_id = message.from_user.id
    stats = get_user_stats(user_id)

    if stats:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 6 –∑–Ω–∞—á–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ 5
        total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ–º
        completed_count = len(completed_topics.split(',')) if completed_topics else 0

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        total_questions = get_questions_count_by_topic(current_topic)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º progress –≤–º–µ—Å—Ç–æ answered_questions
        # answered_questions = get_user_answered_questions_count(user_id, current_topic)
        answered_questions = progress  # –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ current_topic_progress

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Ç–µ–º–µ
        progress_percent = 0
        if total_questions > 0:
            progress_percent = min(100, int(answered_questions / total_questions * 100))

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        topic_names = {
            'typography': '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞',
            'coloristics': '–ö–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞',
            'composition': '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è',
            'ux_principles': 'UX-–ø—Ä–∏–Ω—Ü–∏–ø—ã',
            'ui_patterns': 'UI-–ø–∞—Ç—Ç–µ—Ä–Ω—ã',
        }
        current_topic_name = topic_names.get(current_topic, current_topic.capitalize())

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ–º
        completed_topic_names = []
        if completed_topics:
            for topic in completed_topics.split(','):
                completed_topic_names.append(topic_names.get(topic, topic.capitalize()))

        response = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {current_topic_name}\n"
            f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–µ: {progress_percent}% ({answered_questions}/{total_questions})\n"
            f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–µ–º: {completed_count}/5\n"
        )

        if completed_topic_names:
            response += f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã: {', '.join(completed_topic_names)}\n"

        response += f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {daily_progress}/5"

    else:
        response = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ
    stats_msg = await message.answer(response)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    if user_id in user_active_sessions and user_active_sessions[user_id]:
        # –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è - —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_after(stats_msg, 10))
    else:
        # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è - —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_after(stats_msg, 60))


async def today_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    is_subscribed = await check_subscription(message.from_user.id, message.bot)
    if not is_subscribed:
        await ask_for_subscription(message)
        return

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º —Å–µ—Å—Å–∏–∏
    stats = get_user_stats(user_id)
    if stats:
        total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats
        if daily_progress >= 5:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /today
            try:
                await message.delete()
            except:
                pass

            msg = await message.answer(
                "‚ùå –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞.")
            asyncio.create_task(delete_message_after(msg, 10))
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
    if user_id in user_active_sessions and user_active_sessions[user_id]:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /today
        try:
            await message.delete()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        msg = await message.answer("‚ùå –í—ã —É–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è—â–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é!")
        asyncio.create_task(delete_message_after(msg, 10))
        return

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ 5)"""
    stats = get_user_stats(user_id)

    if not stats:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 6 –∑–Ω–∞—á–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ 5
    total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats

    # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    if daily_progress >= 5:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /today
        try:
            await message.delete()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –æ –ª–∏–º–∏—Ç–µ
        msg = await message.answer("‚ùå –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è. –°–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞–≤—Ç—Ä–∞.")
        asyncio.create_task(delete_message_after(msg, 10))
        return

    # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
    user_active_sessions[user_id] = True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞
    total_questions = get_questions_count_by_topic(current_topic)
    answered_questions = get_user_answered_questions_count(user_id, current_topic)

    if answered_questions >= total_questions:
        # –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
        next_topic = get_next_topic(current_topic)
        if next_topic:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_user_topic_progress(user_id, next_topic, 0)
            current_topic = next_topic
            await message.answer(f"üéâ –¢–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ: {next_topic}")
        else:
            # –í—Å–µ —Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã!")
            # –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            user_active_sessions[user_id] = False
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–º–µ
    topic_questions_count = get_questions_count_by_topic(current_topic)
    if topic_questions_count == 0:
        await message.answer(f"‚ùå –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–µ '{current_topic}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç –≤–æ–ø—Ä–æ—Å—ã —Å–∫–æ—Ä–æ.")
        # –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        user_active_sessions[user_id] = False
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏)
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π
    questions_needed = 5 - daily_progress  # –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    question_ids_result = get_questions_by_topic(user_id, current_topic, questions_needed)
    question_ids = [row[0] for row in question_ids_result] if question_ids_result else []

    if not question_ids:
        # –ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
        next_topic = get_next_topic(current_topic)
        if next_topic:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
            update_user_topic_progress(user_id, next_topic, 0)
            current_topic = next_topic
            await message.answer(f"üéâ –í —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ: {next_topic}")

            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
            question_ids_result = get_questions_by_topic(user_id, current_topic, questions_needed)
            question_ids = [row[0] for row in question_ids_result] if question_ids_result else []

            if not question_ids:
                await message.answer(f"‚ùå –í —Ç–µ–º–µ '{current_topic}' —Ç–æ–∂–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
                # –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
                user_active_sessions[user_id] = False
                return
        else:
            await message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã!")
            # –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            user_active_sessions[user_id] = False
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_next_questions[user_id] = question_ids

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(message, user_id)


async def letter_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /letter —Å—Ä–∞–∑—É
    try:
        await message.delete()
    except:
        pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) != config.ADMIN_ID:
        msg = await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        asyncio.create_task(delete_message_after(msg, 60))
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    admin_broadcast_state[user_id] = True
    msg = await message.answer(
        "‚úâÔ∏è –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /out –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    asyncio.create_task(delete_message_after(msg, 60))


async def out_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /out —Å—Ä–∞–∑—É
    try:
        await message.delete()
    except:
        pass

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) != config.ADMIN_ID:
        msg = await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        asyncio.create_task(delete_message_after(msg, 60))
        return

    # –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if user_id in admin_broadcast_state:
        del admin_broadcast_state[user_id]

    msg = await message.answer("‚ùå –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    asyncio.create_task(delete_message_after(msg, 60))


async def handle_broadcast_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if user_id not in admin_broadcast_state or not admin_broadcast_state[user_id]:
        return False

    # –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    del admin_broadcast_state[user_id]

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    total_users = len(users)
    successful = 0
    failed = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    progress_msg = await message.answer(f"‚úâÔ∏è –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async def send_to_user(user_id):
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy_message –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await message.bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
    for i, user_id in enumerate(users):
        if await send_to_user(user_id):
            successful += 1
        else:
            failed += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫ –∏ –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
        if (i + 1) % 10 == 0:
            try:
                await progress_msg.edit_text(
                    f"‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                    f"–£—Å–ø–µ—à–Ω–æ: {successful}\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: {total_users - i - 1}"
                )
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            except:
                pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await progress_msg.edit_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–£—Å–ø–µ—à–Ω–æ: {successful}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )

    return True


async def end_questions_session(message, user_id):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    # –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã
    if user_id in user_next_questions:
        del user_next_questions[user_id]

    # –°–Ω–∏–º–∞–µ–º –æ—Ç–º–µ—Ç–∫—É –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
    user_active_sessions[user_id] = False

    final_msg = await message.answer(
        "üéâ –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è!\n\n"
        "–ó–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å!"
    )
    asyncio.create_task(delete_message_after(final_msg, 10))


async def send_next_question(message, user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ–ø—Ä–æ—Å–∞
    stats = get_user_stats(user_id)
    if not stats:
        user_active_sessions[user_id] = False
        return

    total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats

    # –°–¢–†–û–ì–û –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç - –µ—Å–ª–∏ —É–∂–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    if daily_progress >= 5:
        await end_questions_session(message, user_id)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ
    if user_id not in user_next_questions or not user_next_questions[user_id]:
        stats = get_user_stats(user_id)
        if not stats:
            user_active_sessions[user_id] = False
            return

        total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ï–©–ï –†–ê–ó –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        if daily_progress >= 5:
            await end_questions_session(message, user_id)
            return

        # –ü–æ–ª—É—á–∞–µ–º –†–û–í–ù–û —Å—Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ª–∏–º–∏—Ç–∞
        questions_needed = 5 - daily_progress
        question_ids_result = get_questions_by_topic(user_id, current_topic, questions_needed)
        question_ids = [row[0] for row in question_ids_result] if question_ids_result else []

        if not question_ids:
            await end_questions_session(message, user_id)
            return

        user_next_questions[user_id] = question_ids

    # –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    question_id = user_next_questions[user_id].pop(0)
    question_data = get_question(question_id)

    if question_data:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ–ø—Ä–æ—Å–∞
        stats = get_user_stats(user_id)
        if stats:
            total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats
            topic_names = {
                'typography': '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞',
                'coloristics': '–ö–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞',
                'composition': '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è',
                'ux_principles': 'UX-–ø—Ä–∏–Ω—Ü–∏–ø—ã',
                'ui_patterns': 'UI-–ø–∞—Ç—Ç–µ—Ä–Ω—ã',
            }
            topic_name = topic_names.get(current_topic, current_topic.capitalize())
            await send_question(message, question_data, f"// {topic_name}")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        user_active_sessions[user_id] = False


async def send_question(message, question_data, caption):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å"""
    (question_id, category, question_block, image_path,
     option_a, option_b, option_c, option_d,
     buttons_count, correct_option, explanation, created_at) = question_data

    keyboard_buttons = []
    letters = ['a', 'b', 'c', 'd']

    for i in range(buttons_count):
        if i < len(letters):
            keyboard_buttons.append(
                InlineKeyboardButton(text=letters[i], callback_data=f"answer_{question_id}_{letters[i]}"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    keyboard.inline_keyboard.append(keyboard_buttons)

    full_question_text = f"{caption}\n\n{question_block}"

    try:
        if image_path and os.path.exists(image_path):
            photo = FSInputFile(image_path)
            msg = await message.answer_photo(
                photo=photo,
                caption=full_question_text,
                reply_markup=keyboard
            )
        else:
            msg = await message.answer(full_question_text, reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        msg = await message.answer(full_question_text, reply_markup=keyboard)

    return msg


async def handle_answer(callback_query: types.CallbackQuery):
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
    await callback_query.answer()

    user_id = callback_query.from_user.id
    data = callback_query.data.split('_')
    question_id = int(data[1])
    user_answer = data[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    stats = get_user_stats(user_id)
    if stats:
        total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats
        if daily_progress >= 5:
            # –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            await end_questions_session(callback_query.message, user_id)
            return

    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        if callback_query.message.photo:
            await callback_query.message.edit_reply_markup(reply_markup=None)
        else:
            await callback_query.message.edit_reply_markup(reply_markup=None)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ

    question_data = get_question(question_id)
    if not question_data:
        return

    (question_id, category, question_block, image_path,
     option_a, option_b, option_c, option_d,
     buttons_count, correct_option, explanation, created_at) = question_data

    is_correct = user_answer == correct_option

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ
    add_answered_question(user_id, question_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if is_correct:
        update_user_stats(user_id, True)
        response = f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ\n\n{explanation}"
    else:
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ \n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option.lower()})\n\n{explanation}"

    # –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–û–ì–†–ï–°–° –ü–û –¢–ï–ú–ï
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats = get_user_stats(user_id)
    if stats:
        total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–µ –Ω–∞ 1
        new_progress = progress + 1
        execute_query(
            'UPDATE users SET current_topic_progress = %s WHERE user_id = %s',
            (new_progress, user_id)
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    if not update_user_daily_progress(user_id):
        # –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        await end_questions_session(callback_query.message, user_id)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    result_message = await callback_query.message.answer(response)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ü–û–°–õ–ï –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    stats = get_user_stats(user_id)
    topic_completed = False
    if stats:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 6 –∑–Ω–∞—á–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ 5
        total_correct, current_topic, progress, completed_topics, user_role, daily_progress = stats
        total_questions = get_questions_count_by_topic(current_topic)
        answered_questions = get_user_answered_questions_count(user_id, current_topic)

        # –ï—Å–ª–∏ —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–º–µ—á–∞–µ–º –µ–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
        if answered_questions >= total_questions:
            mark_topic_completed(user_id, current_topic)
            topic_completed = True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä
    timer_msg = await callback_query.message.answer("‚è≥ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")

    # –ê–Ω–∏–º–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä (–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    for seconds_left in range(9, 0, -1):
        await asyncio.sleep(1)
        try:
            await timer_msg.edit_text(f"‚è≥ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ {seconds_left} —Å–µ–∫—É–Ω–¥...")
        except:
            break  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª

    # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    await timer_msg.delete()

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–±—Ä–∞–ª–∏)
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        original_text = callback_query.message.caption if callback_query.message.photo else callback_query.message.text

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —É–±—Ä–∞–ª–∏)
        if callback_query.message.photo:
            await callback_query.message.edit_caption(caption=original_text, reply_markup=None)
        else:
            await callback_query.message.edit_text(text=original_text, reply_markup=None)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —á–µ—Ä–µ–∑ 0 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(0)
    try:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, —É–¥–∞–ª—è—è –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        await result_message.edit_text(explanation)
    except:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
        await result_message.delete()

    # –ï—Å–ª–∏ —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –ü–û–°–õ–ï –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    if topic_completed:
        next_topic = get_next_topic(current_topic)
        if next_topic:
            update_user_topic_progress(user_id, next_topic, 0)
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ—Ö–æ–¥–µ
            topic_names = {
                'typography': '–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞',
                'coloristics': '–ö–æ–ª–æ—Ä–∏—Å—Ç–∏–∫–∞',
                'composition': '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è',
                'ux_principles': 'UX-–ø—Ä–∏–Ω—Ü–∏–ø—ã',
                'ui_patterns': 'UI-–ø–∞—Ç—Ç–µ—Ä–Ω—ã',
            }
            next_topic_name = topic_names.get(next_topic, next_topic.capitalize())
            await callback_query.message.answer(
                f"üéâ –¢–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ: {next_topic_name}"
            )
        else:
            await callback_query.message.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —Ç–µ–º—ã!")
            return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(callback_query.message, user_id)


async def check_subscription_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫—ç—à–∞"""
    user_id = callback_query.from_user.id

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in subscription_cache:
        del subscription_cache[user_id]

    # –î–µ–ª–∞–µ–º —Å–≤–µ–∂—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await check_subscription(user_id, callback_query.bot, force_check=True)

    if is_subscribed:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
        try:
            await callback_query.message.delete()
        except:
            pass

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback_query.answer(
            "–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            show_alert=True
        )


async def reset_progress_command(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    is_subscribed = await check_subscription(message.from_user.id, message.bot)
    if not is_subscribed:
        await ask_for_subscription(message)
        return

    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    try:
        await message.delete()
    except:
        pass

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"reset_confirm_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"reset_cancel_{user_id}")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    msg = await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ:\n"
        "‚Ä¢ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ\n"
        "‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤",
        reply_markup=keyboard
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_reset_states[user_id] = msg.message_id


async def handle_reset_confirmation(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data.split('_')
    action = data[1]
    target_user_id = int(data[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å
    if user_id != target_user_id:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–±—Ä–æ—Å –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    await callback_query.answer()

    if action == "confirm":
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        reset_user_progress(user_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        if user_id in user_reset_states:
            try:
                await callback_query.bot.delete_message(chat_id=user_id, message_id=user_reset_states[user_id])
            except:
                pass
            del user_reset_states[user_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
        confirmation_msg = await callback_query.message.answer(
            "‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è."
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_after(confirmation_msg, 5))

    elif action == "cancel":
        # –û—Ç–º–µ–Ω—è–µ–º —Å–±—Ä–æ—Å
        if user_id in user_reset_states:
            try:
                await callback_query.bot.delete_message(chat_id=user_id, message_id=user_reset_states[user_id])
            except:
                pass
            del user_reset_states[user_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        cancel_msg = await callback_query.message.answer("‚ùå –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_after(cancel_msg, 5))

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await callback_query.message.delete()
    except:
        pass


def cleanup_old_cache():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–∞—Ö handlers"""
    current_time = time.time()

    # –û—á–∏—â–∞–µ–º –∫—ç—à–∏
    for cache_dict in [user_next_questions, user_active_sessions,
                       admin_broadcast_state, user_reset_states, subscription_cache]:
        keys_to_remove = []
        for key, value in cache_dict.items():
            if isinstance(value, dict) and 'timestamp' in value:
                if current_time - value['timestamp'] > CACHE_TTL:
                    keys_to_remove.append(key)
            elif current_time - getattr(value, 'timestamp', current_time) > CACHE_TTL:
                keys_to_remove.append(key)

        for key in keys_to_remove:
            del cache_dict[key]

    # –û—á–∏—â–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∫—ç—à–∏
    for cache_dict in [user_next_questions, user_active_sessions]:
        if len(cache_dict) > MAX_CACHE_SIZE:
            keys_to_remove = list(cache_dict.keys())[:len(cache_dict) - MAX_CACHE_SIZE]
            for key in keys_to_remove:
                del cache_dict[key]


def register_handlers(dp):
    dp.message.register(start_command, Command('start'))
    dp.message.register(stats_command, Command('stats'))
    dp.message.register(today_command, Command('today'))
    dp.message.register(reset_progress_command, Command('reset_progress'))
    dp.message.register(letter_command, Command('letter'))
    dp.message.register(out_command, Command('out'))
    dp.callback_query.register(handle_answer, F.data.startswith('answer_'))
    dp.callback_query.register(check_subscription_callback, F.data == "check_subscription")
    dp.callback_query.register(handle_reset_confirmation, F.data.startswith('reset_'))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    dp.message.register(handle_broadcast_message, F.chat.type == "private")
